head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
require("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/12", format="%m/%d/%y")
to.dat <- as.Date("12/31/14", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
?getYahooData
library(quantmod)
?getSymbols
require("quantmod")
library(quantmod)
?getNativeSymbolInfo
install.packages("quantmod")
install.packages("quantmod")
?getSymbols
mGoog <- to.monthly(GOOG)
install.packages("quantmod")
install.packages("quantmod")
rm(list=ls())
load_from_swirl("Practical Machine Learning")
library(swirl)
load_from_swirl("Practical Machine Learning")
swirl()
dim(hinger)
dim(hunger)
948
names(hunger)
fit <-lm(Numeric~Year,data=hunger)
coef(hunger)
summary(fit)$coef
lmF <-lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF <-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],data=hunger)
lmM <-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],data=hunger)
lmBoth <-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter <-lm(Numeric~Year+Sex+Year+Sex,data=hunger)
lmInter <-lm(Numeric~Year+Sex+Year*Sex,data=hunger)
summary(lmInter)
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x out2[-1,])
fitno <- lm(y[-1,]~x[-1,] out2)
fitno <- lm(y[-1,]~x[-1,], out2)
fitno <- lm(y[-1]~x[-1], out2)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
play()
plot(fit)
plot(fit)
nxt
nxt()
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]-predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalue(fit))
head(hatvalues(fit))
sd(resid(fit))
play()
a<-df.residual(fit)
b <- resid(fit)
identical(a,b)
head(a)
head(b)
df.residual(fit)
y_hat <- predict(fit)
y
y_dev <- y_hat - out2$y
sd(y_dev)
swirl()
nxt
nxt(0)
nxt()
?plot.xts
library(xts)
?plot.xts
x <- rnorm(16)
plot.xts(x, type="candle")
x <- data.frame(open=4,high=5,low=2,close=3)
xts(x)
x <- data.frame(date=as.date("20150729"), open=4,high=5,low=2,close=3)
?xts
x <- data.frame(date=as.Date("20150729"), open=4,high=5,low=2,close=3)
x <- data.frame(date=as.Date("7/29/2015"), open=4,high=5,low=2,close=3)
now()
library(lubridate)
now()
x <- data.frame(date=now(), open=4,high=5,low=2,close=3)
as.xts(x)
x <- data.frame(date=POSIXlt(now()), open=4,high=5,low=2,close=3)
sys.date()
sys.Date()
Sys.Date()
x <- data.frame(date=as.POSIXlt(now()), open=4,high=5,low=2,close=3)
x
str(x)
xts(x)
plot(x, type="candles")
chartSeries
library(quantmod)
chartSeries
getSymbols("GS")
dim(GS)
head(GS)
chartSeries(GS, TA=NULL)
addDEMA
addDEMA()
tail(GS)
getSymbols("GILD")
chartSeries(GILD, TA=NULL)
?chartSeries
names(GILD)
head(GILD)
class(GILD)
GILD[1,]
rownames(GILD)
dim(GILD)
q<-GILD[2100:2157,]
head(q)
chartSeries(q)
now()
today()
yesterday()
today()-1
from.dat <- as.Date(today()-10, format="%m/%d/%y")
from.dat
to.dat <- as.Date(today(), format="%m/%d/%y")
getSymbols("GOOG", from = from.dat, to = to.dat)
dim(GOOG)
chartSeries(GOOG)
w<-as.data.frame(GOOG)
w
GOOG.2 <- as.xts(w)
GOOG.@
GOOG.2
chartSeries(GOOG.2)
chartSeries(w)
?chartSeries
chartSeries(w)
from.dat <- as.Date(today()-60, format="%m/%d/%y")
to.dat <- as.Date(today(), format="%m/%d/%y")
getSymbols("GOOG", from = from.dat, to = to.dat)
chartSeries(GOOG)
getSymbols("GOOG", src="Yahoo", from = from.dat, to = to.dat)
chartSeries(GOOG)
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
chartSeries(GOOG)
tail(GOOG)
getSymbols("HBI", src="yahoo", from = from.dat, to = to.dat)
tail(HBI)
getQuote("HBI", src="yahoo")
hbi<-getQuote("HBI", src="yahoo")
hbi
hbi<-getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
hbi
getQuote("HBI", src="yahoo",what=(c("High","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low","Close")))
hbi<-getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low","Last")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low")))
getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low")))
getQuote("HBI", src="yahoo",what=yahooQF("Open"))
getQuote("HBI", src="yahoo",what=yahooQF("Last"))
getQuote("HBI", src="yahoo")
getQuote(c("HBI","IBM","RAX"), src="yahoo")
quoteList <- c("AAPL","HBI","GS")
getQuote(quoteList)
?rfvc
require(randomForest)
?rfvc
rfcv
rm(list=ls())
swirl
swirl()
sigma
sigma<-lm(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma * resid(fit)/sqrt(1-hatvalues(fit))
rstd <- resid(fit)/sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(rstd)
head(cbind(rstd, rstandard(fit)))
plot(fit, which=1)
plot(fit, which=2)
plot(fit, which=3)
plot(fit, which=2)
sigma1
sigma1<- lm()
sigma1<- resid(fitno)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit[1])))
snapshot.info()
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit[1])))
nxt()
resid(fit)[1]/(sigma*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) -predict(fit, out2)
sigma
sd(resid(fit))
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1
rgp1()
rrgp1()
rgp2()
head(Swiss)
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdls <- lm(Fertility~swiss[,-2])
mdls <- lm(swiss$Fertility~swiss[,-2])
mdls <- lm(Fertility~., swiss[,-2])
mdl2 <- lm(Fertility~., swiss[,-2])
mdl2 <- lm(Fertility~. -Examination, swiss)
vif(mdl2)
?lm
?show
"colSums"
load(datasets)
load(dataset)
ToothGrowth
boxplot(len~supp*dose, data=ToothGrowth, notch=TRUE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth")
boxplot(y=len, x=dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth")
getwd()
setwd("09_DevelopingDataProductsFinal")
dir()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scatterplot(len~dose, ToothGrowth)
scatterplot(Tooth$Growth$len, ToothGrowth$dose)
plot(Tooth$Growth$len, ToothGrowth$dose)
plot(ToothGrowth$len, ToothGrowth$dose)
plot(ToothGrowth$dose, ToothGrowth$len)
?scatterplot
library(car)
scatterplot(Tooth$Growth$len, ToothGrowth$dose)
scatterplot(ToothGrowth$len, ToothGrowth$dose)
scatterplot(len~dose, ToothGrowth)
?scatterplot
scatterplot(len~dose, ToothGrowth, groups=dose)
UN
runApp()
scatterplot(ToothGrowth$len, ToothGrowth$dose)
scatterplot(len~dose, data=ToothGrowth)
runApp()
runApp()
barchart(len~dose.data=ToothGrowth)
barchart(len~dose,data=ToothGrowth)
runApp()
runApp()
deployApp()
deployApp()
library(shinyapps)
deployApp()
stripchart(ToothGrowth)
runApp
runApp()
plot(x=dose, y=len, data=ToothGrowth)
scatterplot(x=dose, y=len, data=ToothGrowth)
ToothGrowth
plot(len~dose, data=ToothGrowth)
plot(len~jitter(dose,2), data=ToothGrowth)
plot(len~jitter(dose,1), data=ToothGrowth)
plot(len~jitter(dose,0.5), data=ToothGrowth)
plot(len~jitter(dose,0.1), data=ToothGrowth)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(ToothGrowth)
runApp()
runApp()
runApp()
runApp()
runApp()
t <= subset(ToothGrowth, dose=c(1.0, 2.0))
t <= subset(ToothGrowth, dose=1.0
)
t <= subset(ToothGrowth, dose %in% c(1.0, 2.0))
t <= subset(ToothGrowth, dose == c(1.0, 2.0))
t <= subset(ToothGrowth, dose == 1.0
t <= subset(ToothGrowth, dose == 1.0)
t <- subset(ToothGrowth, dose == 1.0)
t
t <- subset(ToothGrowth, dose == c(1.0, 2.0))
t
t <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t <- subset(ToothGrowth, dose="1.0")
t
t <- subset(ToothGrowth, dose=="1.0")
t
t <- subset(ToothGrowth, dose==1.0)
t
t <- subset(ToothGrowth, dose==1)
t
t <- subset(ToothGrowth, dose=="1")
t
t <- subset(ToothGrowth, dose=="1.0")
t
t <- subset(ToothGrowth, dose==c("1.0", "2.0"))
t
t <- subset(ToothGrowth, dose==as.numeric(c("1.0", "2.0"))
t
t <- subset(ToothGrowth, dose==as.numeric(c("1.0", "2.0"))
t <- subset(ToothGrowth, dose==as.numeric(c("1.0", "2.0")))
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(len~dose, data=ToothGrowth)
plot(len~dose, data=ToothGrowth, col=c("red", "black"))
plot(len~dose, data=ToothGrowth, col=supp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nrows(ToothGrowth)
nrow(ToothGrowth)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ToothGrowth
?subset
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- c("A","B","C")
y <- c(1,2,3)
plot (y~x)
plot(x,y)
plot(as.numeric(x),y)
plot(y~as.numeric(x))
x2 <- c(1,2,3)
plot(x2, y)
getwd()
setwd("Slidify")
dir()
# 1) Install devtools
install.packages("devtools")
library(devtools)
# 2) Install slidify
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
# 3) load slidify
library(slidify)
install_github("ramnathv/slidify")
install_github("ramnathv/slidify")
runApp()
setwd("..")
runApp()
