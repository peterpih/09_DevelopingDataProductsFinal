forecast <- forecast(fit)
forecast
p <- predict(fit)
p
forecast <- forecast(fit, level=95, h = h)
length(h)
h
dim(forecast)
forecast
class9forecast
class(forecast)
p
p<-predict(fit, level=95, h=h)
p
all.equal(p, forecast)
p<-predict(fit)
p
dim(testing)
dim(tstrain)
length(tstrain)
class(testing)
dim(testing)
head(testing)
dim(testing)
dim(tstrain)
head(tstrain)
length(tstrain)
p.train <- predict(tstrain)
length(p.train
)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat
head(dat)
dim(dat)
accuracy
?accuracy
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstrain
class(tstrain)
str(tstrain)
class(training$visitsTumblr)
fit.ts bats(tstrain)
fit.ts <- bats(tstrain)
t <- training$visitsTumblr
class(t)
fit.int <- bats(tstrain)
identical(fit.ts, fit.int)
?ts
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dim(training)
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dim(training)
dim(tstrain)
length(tstrain)
fit.bats <- bats(tstrain)
predict.bats <- predict(fit.bats)
length*predict.bats
length(predict.bats)
predict.bats <- predict(fit.bats, h = length(tstrain))
length(predict.bats)
dim(training)
h <- dim(training)[1]
predict.bats <- predict(fit.bats, h = h
)
predict.bats <- predict(fit.bats, h = h)
str(predict.bats)
predict(fit.bats)
predict(fit.bats, level=95)
predict(fit.bats, level=95, h=200)
w<-predict(fit.bats, level=95, h=200)
head(w,10)
head(w,3)
w2<-forecast(fit.bats, level=95, h=200)
head(w2,10)
?bats
?plot.enet
library(AppliedPredictiveModeling)
?plot.enet
install.packages("elasticnet")
library(elesticnet)
library(elasticnet)
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(training)
fit.lasso <- train(CompressiveStrength~. , data=training, method="lasso")
fit.lasso
plot.enet(fit.lasso)
p<-predict(fit.lasso)
plit.enet(p)
plot.enet(p)
p
plot.enet(fit.lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
install.packages("quantmod")
library("quantmod", lib.loc="~/R/win-library/3.2")
detach("package:quantmod", unload=TRUE)
?detach
?attach
library(quantmod)
remove.packages(("quantmod"))
remove.packages("quantmod")
library(quantmod)
require("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
require("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/12", format="%m/%d/%y")
to.dat <- as.Date("12/31/14", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
?getYahooData
library(quantmod)
?getSymbols
require("quantmod")
library(quantmod)
?getNativeSymbolInfo
install.packages("quantmod")
install.packages("quantmod")
?getSymbols
mGoog <- to.monthly(GOOG)
install.packages("quantmod")
install.packages("quantmod")
rm(list=ls())
load_from_swirl("Practical Machine Learning")
library(swirl)
load_from_swirl("Practical Machine Learning")
swirl()
dim(hinger)
dim(hunger)
948
names(hunger)
fit <-lm(Numeric~Year,data=hunger)
coef(hunger)
summary(fit)$coef
lmF <-lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF <-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],data=hunger)
lmM <-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],data=hunger)
lmBoth <-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter <-lm(Numeric~Year+Sex+Year+Sex,data=hunger)
lmInter <-lm(Numeric~Year+Sex+Year*Sex,data=hunger)
summary(lmInter)
fit <- lm(y~x, out2)
plot(fit, which=1)
fitno <- lm(y~x out2[-1,])
fitno <- lm(y[-1,]~x[-1,] out2)
fitno <- lm(y[-1,]~x[-1,], out2)
fitno <- lm(y[-1]~x[-1], out2)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
play()
plot(fit)
plot(fit)
nxt
nxt()
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]-predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
head(hatvalue(fit))
head(hatvalues(fit))
sd(resid(fit))
play()
a<-df.residual(fit)
b <- resid(fit)
identical(a,b)
head(a)
head(b)
df.residual(fit)
y_hat <- predict(fit)
y
y_dev <- y_hat - out2$y
sd(y_dev)
swirl()
nxt
nxt(0)
nxt()
?plot.xts
library(xts)
?plot.xts
x <- rnorm(16)
plot.xts(x, type="candle")
x <- data.frame(open=4,high=5,low=2,close=3)
xts(x)
x <- data.frame(date=as.date("20150729"), open=4,high=5,low=2,close=3)
?xts
x <- data.frame(date=as.Date("20150729"), open=4,high=5,low=2,close=3)
x <- data.frame(date=as.Date("7/29/2015"), open=4,high=5,low=2,close=3)
now()
library(lubridate)
now()
x <- data.frame(date=now(), open=4,high=5,low=2,close=3)
as.xts(x)
x <- data.frame(date=POSIXlt(now()), open=4,high=5,low=2,close=3)
sys.date()
sys.Date()
Sys.Date()
x <- data.frame(date=as.POSIXlt(now()), open=4,high=5,low=2,close=3)
x
str(x)
xts(x)
plot(x, type="candles")
chartSeries
library(quantmod)
chartSeries
getSymbols("GS")
dim(GS)
head(GS)
chartSeries(GS, TA=NULL)
addDEMA
addDEMA()
tail(GS)
getSymbols("GILD")
chartSeries(GILD, TA=NULL)
?chartSeries
names(GILD)
head(GILD)
class(GILD)
GILD[1,]
rownames(GILD)
dim(GILD)
q<-GILD[2100:2157,]
head(q)
chartSeries(q)
now()
today()
yesterday()
today()-1
from.dat <- as.Date(today()-10, format="%m/%d/%y")
from.dat
to.dat <- as.Date(today(), format="%m/%d/%y")
getSymbols("GOOG", from = from.dat, to = to.dat)
dim(GOOG)
chartSeries(GOOG)
w<-as.data.frame(GOOG)
w
GOOG.2 <- as.xts(w)
GOOG.@
GOOG.2
chartSeries(GOOG.2)
chartSeries(w)
?chartSeries
chartSeries(w)
from.dat <- as.Date(today()-60, format="%m/%d/%y")
to.dat <- as.Date(today(), format="%m/%d/%y")
getSymbols("GOOG", from = from.dat, to = to.dat)
chartSeries(GOOG)
getSymbols("GOOG", src="Yahoo", from = from.dat, to = to.dat)
chartSeries(GOOG)
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
chartSeries(GOOG)
tail(GOOG)
getSymbols("HBI", src="yahoo", from = from.dat, to = to.dat)
tail(HBI)
getQuote("HBI", src="yahoo")
hbi<-getQuote("HBI", src="yahoo")
hbi
hbi<-getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
hbi
getQuote("HBI", src="yahoo",what=(c("High","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low","Close")))
hbi<-getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low","Close")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low","Last")))
getQuote("HBI", src="yahoo",what=yahooQF(c("High","High","Low")))
getQuote("HBI", src="yahoo",what=yahooQF(c("Open","High","Low")))
getQuote("HBI", src="yahoo",what=yahooQF("Open"))
getQuote("HBI", src="yahoo",what=yahooQF("Last"))
getQuote("HBI", src="yahoo")
getQuote(c("HBI","IBM","RAX"), src="yahoo")
quoteList <- c("AAPL","HBI","GS")
getQuote(quoteList)
?rfvc
require(randomForest)
?rfvc
rfcv
rm(list=ls())
swirl
swirl()
sigma
sigma<-lm(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma * resid(fit)/sqrt(1-hatvalues(fit))
rstd <- resid(fit)/sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(rstd)
head(cbind(rstd, rstandard(fit)))
plot(fit, which=1)
plot(fit, which=2)
plot(fit, which=3)
plot(fit, which=2)
sigma1
sigma1<- lm()
sigma1<- resid(fitno)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit[1])))
snapshot.info()
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit[1])))
nxt()
resid(fit)[1]/(sigma*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) -predict(fit, out2)
sigma
sd(resid(fit))
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1
rgp1()
rrgp1()
rgp2()
head(Swiss)
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdls <- lm(Fertility~swiss[,-2])
mdls <- lm(swiss$Fertility~swiss[,-2])
mdls <- lm(Fertility~., swiss[,-2])
mdl2 <- lm(Fertility~., swiss[,-2])
mdl2 <- lm(Fertility~. -Examination, swiss)
vif(mdl2)
?lm
?show
"colSums"
install.packages("devtools")
library(devtools)
version
install.packages("devtools")
library(devtools)
install_github("ramnathv/slidify")
install.packages("stringi")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
getwd()
setwd("09_DevelopingDataProducts")
setwd("Slidify")
dir()
setwd("../09_DevelopingDataProductsFinal")
dir()
setwd("Slidify")
dir
dir ()
author("my_slidify")
library(slidify)
author("my_slidify")
setwd("..")
getwd()
setwd("..")
getwd()
author("My_Slidify")
dir()
slidfy("index.Rmd")
slidify("index.Rmd")
dir()
install_github('ramnathv/slidify', ref = github_pull(425))
slidify("index.Rmd")
library(knitr)
dir()
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd)")
slidify("index.Rmd")
getwd()
dir()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
cd c:
setwd("c:/r")
mkdir pages-test
mkdir "pages-test"
setwd("pages-test")
boxplot(len~dose, data=ToothGrowth)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
par(mfrow = c(1, 2))  # 3 rows and 2 columns
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
getwd()
setwd("C:/r/09_DevelopingDataProductsFinal/My_Slidify")
dir()
slidify("index.Rmd")
slidify("index.Rmd")
dim(ToothGrowth)
summary(ToothGrowth)
slidify("index.Rmd")
?par
?layout
layout(matrix(c(1,1,2,3)), 2, 2, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement"
par(mfrow = c(1, 3))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
par(mfrow = c(1, 3))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
par(mfrow = c(1, 3))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement and Dosage")
par(mfrow = c(1, 3), mar=c(5,5,5,5))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement and Dosage")
par(mfrow = c(1, 3), mar=c(5,5,10,10))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement and Dosage")
par(mfrow = c(1, 3), mar=c(5,5,1,1))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement and Dosage")
par(mfrow = c(1, 3), mar=c(1,1,1,1))  # 3 rows and 2 columns
# layout(matrix(c(1,1,2,3)), 1, 1, byrow=TRUE)
boxplot(len~dose, data=ToothGrowth, ylab="Tooth Length", xlab="Dosage")
boxplot(len~supp, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement")
boxplot(len~supp*dose, data=ToothGrowth, ylab="Tooth Length", xlab="Supplement and Dosage")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
data("ToothGrowth")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
